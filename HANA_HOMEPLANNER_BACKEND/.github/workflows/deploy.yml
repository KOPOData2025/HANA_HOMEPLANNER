name: Build and Deploy to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # PR인 경우 배포하지 않고 빌드만 수행
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to GCP
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}
          script: |
            echo "🚀 Deploying to GCP VM..."
            
            # 홈 디렉토리로 이동
            cd /home/${{ secrets.GCP_USERNAME }}
            
            # 환경 변수 파일 생성 (GitHub Secrets 사용)
            # 모든 시크릿이 필수이므로 누락된 시크릿이 있으면 배포 실패
            cat > .env.production << EOF
            SPRING_PROFILES_ACTIVE=prod
            DB_HOSTNAME=${{ secrets.DB_HOSTNAME }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            MONGODB_HOST=${{ secrets.MONGODB_HOST }}
            MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }}
            MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SUBSCRIPTION_API_KEY=${{ secrets.SUBSCRIPTION_API_KEY }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
            EXTERNAL_MY_DATA_URL=${{ secrets.EXTERNAL_MY_DATA_URL }}
            COOLSMS_API_KEY=${{ secrets.COOLSMS_API_KEY }}
            COOLSMS_API_SECRET=${{ secrets.COOLSMS_API_SECRET }}
            COOLSMS_SENDER_NUMBER=${{ secrets.COOLSMS_SENDER_NUMBER }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            FRONTEND_DOMAIN=${{ secrets.FRONTEND_DOMAIN }}
            FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}
            DOCKER_IMAGE_NAME=${{ secrets.DOCKER_IMAGE_NAME }}
            EOF
            
            # docker-compose.yml 파일 생성/업데이트
            cat > docker-compose.yml << EOF
            version: '3.8'
            
            services:
              home-planner:
                image: \${DOCKER_IMAGE_NAME:-kwon3011/home-planner:latest}
                container_name: home-planner
                ports:
                  - "8080:8080"
                environment:
                  - SPRING_PROFILES_ACTIVE=\${SPRING_PROFILES_ACTIVE:-prod}
                  - DB_HOSTNAME=\${DB_HOSTNAME}
                  - DB_USERNAME=\${DB_USERNAME}
                  - DB_PASSWORD=\${DB_PASSWORD}
                  - MONGODB_HOST=\${MONGODB_HOST}
                  - MONGODB_USERNAME=\${MONGODB_USERNAME}
                  - MONGODB_PASSWORD=\${MONGODB_PASSWORD}
                  - JWT_SECRET=\${JWT_SECRET}
                  - SUBSCRIPTION_API_KEY=\${SUBSCRIPTION_API_KEY}
                  - AWS_ACCESS_KEY=\${AWS_ACCESS_KEY}
                  - AWS_SECRET_KEY=\${AWS_SECRET_KEY}
                  - AWS_REGION=\${AWS_REGION}
                  - AWS_S3_BUCKET_NAME=\${AWS_S3_BUCKET_NAME}
                  - EXTERNAL_MY_DATA_URL=\${EXTERNAL_MY_DATA_URL}
                  - COOLSMS_API_KEY=\${COOLSMS_API_KEY}
                  - COOLSMS_API_SECRET=\${COOLSMS_API_SECRET}
                  - COOLSMS_SENDER_NUMBER=\${COOLSMS_SENDER_NUMBER}
                  - FRONTEND_URL=\${FRONTEND_URL}
                  - FRONTEND_DOMAIN=\${FRONTEND_DOMAIN}
                  - FRONTEND_PORT=\${FRONTEND_PORT}
                volumes:
                  - ./logs:/app/logs
                restart: unless-stopped
                healthcheck:
                  test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                networks:
                  - home-planner-network
            
            networks:
              home-planner-network:
                driver: bridge
            EOF
            
            # logs 디렉토리 생성 (볼륨 마운트용)
            mkdir -p logs
            
            # Docker Compose로 서비스 재시작
            echo "🔄 Stopping existing containers..."
            sudo docker-compose --env-file .env.production down || true
            
            echo "📥 Pulling latest image..."
            sudo docker-compose --env-file .env.production pull
            
            echo "🚀 Starting new containers..."
            sudo docker-compose --env-file .env.production up -d
            
            echo "🧹 Cleaning up old images..."
            sudo docker image prune -f
            
            echo "✅ Deployment completed successfully!"
            
            # 배포 상태 확인
            echo "🔍 Checking deployment status..."
            sleep 10
            sudo docker-compose --env-file .env.production ps
            sudo docker-compose --env-file .env.production logs --tail=20 home-planner

  # PR인 경우 빌드만 수행
  build-only:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Run tests
        run: ./gradlew test

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/test/
          retention-days: 30
